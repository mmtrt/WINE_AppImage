# WINE env
export WINEPREFIX=${WINEPREFIX:-"$HOME/.wine-appimage"}
export WINEDEBUG=${WINEDEBUG:-"fixme-all"}

# DXVK env
export DXVK_HUD=${DXVK_HUD:-"0"}
export DXVK_LOG_LEVEL=${DXVK_LOG_LEVEL:-"none"}
export DXVK_STATE_CACHE=${DXVK_STATE_CACHE:-"0"}
export DXVK_CONFIG_FILE=${DXVK_CONFIG_FILE:-"$progHome/dxvk.conf"}

# check gpu vendor
VENDOR=$(glxinfo -B | grep "OpenGL vendor")

if [[ $VENDOR == *"Intel"* ]]; then
  export VK_ICD_FILENAMES="/usr/share/vulkan/icd.d/intel_icd.i686.json:/usr/share/vulkan/icd.d/intel_icd.x86_64.json"
elif [[ $VENDOR == *"NVIDIA"* ]]; then
  export VK_ICD_FILENAMES="/usr/share/vulkan/icd.d/nvidia_icd.json"
elif [[ $VENDOR == *"Radeon"* ]]; then
  export VK_ICD_FILENAMES="/usr/share/vulkan/icd.d/radeon_icd.i686.json:/usr/share/vulkan/icd.d/radeon_icd.x86_64.json"
fi

if [ ! -d "$WINEPREFIX" ]; then

 if [ ! -d "$HOME"/.cache/wine ]; then
   mkdir -p "$HOME"/.cache/wine
 fi

 # Remove old created links
 find "$HOME/.cache/wine/" -type l -delete &>/dev/null

 if [ ! -f "$HOME"/.cache/wine/"$(ls $APPDIR/winedata/ | grep mono)" ]; then
   ln -s $APPDIR/winedata/wine-mono-*.msi "$HOME"/.cache/wine/
 fi

 if [ $(ls $APPDIR/winedata/ | grep gecko | head -1 | grep -c "e_g") -eq 1 ]; then
   GECKO=$(ls $APPDIR/winedata/ | grep gecko | head -1 | cut -d'-' -f2)
 else
   GECKO=$(ls $APPDIR/winedata/ | grep gecko | head -1 | cut -d'-' -f3)
 fi

 for wg in wine-gecko-${GECKO}-x86.msi wine-gecko-${GECKO}-x86_64.msi wine_gecko-${GECKO}-x86.msi wine_gecko-${GECKO}-x86_64.msi ; do
   if [[ ! -f "$HOME"/.cache/wine/$wg && -f $APPDIR/winedata/$wg ]]; then
     ln -s $APPDIR/winedata/$wg "$HOME"/.cache/wine/
   fi
 done

 # Better support for CJK fonts.
 if (locale | grep 'LANG=ja_JP') >/dev/null 2>&1; then
   "$APPDIR/usr/bin/wine" regedit "$APPDIR/winedata/config/noto-sans-cjk-jp.reg"
   sleep 1
 elif (locale | grep 'LANG=ko_KR') >/dev/null 2>&1; then
   "$APPDIR/usr/bin/wine" regedit "$APPDIR/winedata/config/noto-sans-cjk-kr.reg"
   sleep 1
 elif (locale | grep -e 'LANG=zh_CN' -e 'LANG=zh_SG') >/dev/null 2>&1; then
   "$APPDIR/usr/bin/wine" regedit "$APPDIR/winedata/config/noto-sans-cjk-sc.reg"
   sleep 1
 elif (locale | grep 'LANG=zh_HK') >/dev/null 2>&1; then
   "$APPDIR/usr/bin/wine" regedit "$APPDIR/winedata/config/noto-sans-cjk-hk.reg"
   sleep 1
 elif (locale | grep -e 'LANG=zh_MO' -e 'LANG=zh_TW') >/dev/null 2>&1; then
   "$APPDIR/usr/bin/wine" regedit "$APPDIR/winedata/config/noto-sans-cjk-tc.reg"
   sleep 1
 fi

fi

aiso-settings(){
  PYTHON=$APPDIR/usr/bin/python3
  PREFIX="$APPDIR/usr"
  exec "${PYTHON}" "${PREFIX}/share/wineasio/settings.py"
}

aiso-register(){
  # define possible locations for wineasio DLLs
  u32=(
  "$APPDIR/opt/wine-devel/lib/wine/i386-unix/wineasio32.so"
  "$APPDIR/opt/wine-stable/lib/wine/i386-unix/wineasio32.so"
  "$APPDIR/opt/wine-staging/lib/wine/i386-unix/wineasio32.so"
  )

  u64=(
  "$APPDIR/opt/wine-devel/lib64/wine/x86_64-unix/wineasio64.so"
  "$APPDIR/opt/wine-stable/lib64/wine/x86_64-unix/wineasio64.so"
  "$APPDIR/opt/wine-staging/lib64/wine/x86_64-unix/wineasio64.so"
  )

  # try to register 32bit DLL
  for u in ${u32[@]}; do
      w=$(echo ${u} | sed -e 's|/i386-unix/wineasio32.so|/i386-windows/wineasio32.dll|g')
      if [ -e "${u}" ] && [ -e "${w}" ]; then
          cp -v "${w}" "${WINEPREFIX}/drive_c/windows/syswow64"
          regsvr32 "${u}"
          break
      fi
  done

  # try to register 64bit DLL
  for u in ${u64[@]}; do
      w=$(echo ${u} | sed -e 's|/x86_64-unix/wineasio64.so|/x86_64-windows/wineasio64.dll|g')
      if [ -e "${u}" ] && [ -e "${w}" ]; then
          cp -v "${w}" "${WINEPREFIX}/drive_c/windows/system32"
          $APPDIR/usr/bin/wine64 regsvr32 "${u}"
          break
      fi
  done
}

# Load winecfg if no arguments given
APPLICATION=""
if [ -z "$*" ] ; then
  APPLICATION="winecfg"
fi

# Allow the AppImage to be symlinked to e.g., /usr/bin/wineserver
if [ -n "$APPIMAGE" ] ; then
  BINARY_NAME=$(basename "$ARGV0")
else
  BINARY_NAME=$(basename "$0")
fi

if [ -n "$1" ] && [ -e "$APPDIR/bin/$1" ] ; then
  MAIN="$APPDIR/bin/$1" ; shift
elif [ -n "$1" ] && [ -e "$APPDIR/usr/bin/$1" ] ; then
  MAIN="$APPDIR/usr/bin/$1" ; shift
elif [ -e "$APPDIR/bin/$BINARY_NAME" ] ; then
  MAIN="$APPDIR/bin/$BINARY_NAME"
elif [ -e "$APPDIR/usr/bin/$BINARY_NAME" ] ; then
  MAIN="$APPDIR/usr/bin/$BINARY_NAME"
elif [ "$1" == "wineaiso-settings" ] ; then
  MAIN=aiso-settings
elif [ "$1" == "wineaiso-register" ] ; then
  MAIN=aiso-register
else
  MAIN="$APPDIR/usr/bin/wine"
fi

if [ -z "$APPLICATION" ] ; then
"$MAIN" "$@"
else
"$MAIN" "$APPLICATION"
fi